generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum untuk mendefinisikan peran user
enum UserRole {
  ADMIN
  PROVIDER
  CUSTOMER
}

/// Enum tipe layanan: apakah fixed price atau membutuhkan konsultasi terlebih dahulu
enum ServiceType {
  FIXED
  CONSULTATIVE
}

/// Enum status order untuk menandai siklus hidup transaksi
enum OrderStatus {
  PENDING          // Order baru dibuat / menunggu konfirmasi provider
  NEGOTIATION      // (Khusus konsultatif) Sedang dalam proses konsultasi/penawaran
  ACCEPTED         // Provider menerima order/konsultasi dan order disetujui
  IN_PROGRESS      // Sedang dikerjakan oleh provider
  COMPLETED        // Selesai dan customer mengkonfirmasi
  DISPUTED         // Terdapat sengketa
  CANCELLED        // Order dibatalkan
}

/// Model utama untuk data user yang mencakup semua peran
model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  name              String
  role              UserRole
  phone             String?        // Nomor telepon untuk verifikasi/2FA
  twoFactorEnabled  Boolean        @default(false) // Flag apakah 2FA aktif
  otpSecret         String?        // Secret OTP untuk verifikasi 2FA, bila diaktifkan
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  /// Relasi ke profil provider, jika user berperan PROVIDER
  providerProfile   ProviderProfile?
  /// Relasi ke order (pemesanan) yang dibuat oleh customer
  customerOrders    Order[]        @relation("CustomerOrders")
  /// Relasi ke ulasan yang diberikan oleh customer
  customerReviews   Review[]       @relation("CustomerReviews")
  /// Relasi ke pesan chat yang dikirim oleh user
  sentMessages      ChatMessage[]  @relation("SentMessages")
  /// Log aktivitas yang berkaitan dengan user (audit)
  auditLogs         AuditLog[]
  /// Notifikasi yang diterima oleh user
  notifications     Notification[]
}

/// Model tambahan bagi user dengan peran PROVIDER
model ProviderProfile {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique
  user            User        @relation(fields: [userId], references: [id])
  about           String?     // Deskripsi profil dan keahlian
  portfolio       String?     // Informasi portofolio; bisa berupa URL atau data JSON string
  rating          Float       @default(0.0) // Nilai rata-rata berdasarkan ulasan
  verified        Boolean     @default(false) // Status verifikasi manual oleh admin
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  /// Relasi ke layanan yang ditawarkan oleh provider
  services        Service[]
  /// Order yang terkait dengan provider (order melalui fitur fixed atau konsultatif)
  providerOrders  Order[]     @relation("ProviderOrders")
}

/// Model Layanan yang ditawarkan oleh provider
model Service {
  id              Int             @id @default(autoincrement())
  providerId      Int
  providerProfile ProviderProfile @relation(fields: [providerId], references: [id])
  name            String          // Nama layanan
  description     String          // Deskripsi detail tentang layanan
  serviceType     ServiceType     // Menandai apakah harga tetap atau konsultatif
  fixedPrice      Float?          // Ditetapkan jika serviceType FIXED
  media           String?         // URL media (foto atau video) atau data JSON string untuk galeri layanan
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  /// Relasi ke order terkait layanan ini
  orders          Order[]
}

/// Model Order untuk setiap transaksi/pemesanan
model Order {
  id              Int             @id @default(autoincrement())
  customerId      Int
  customer        User            @relation("CustomerOrders", fields: [customerId], references: [id])
  providerId      Int
  provider        ProviderProfile @relation("ProviderOrders", fields: [providerId], references: [id])
  serviceId       Int
  service         Service         @relation(fields: [serviceId], references: [id])
  orderType       ServiceType     // Tipe order: FIXED atau CONSULTATIVE (diturunkan dari service)
  status          OrderStatus     @default(PENDING)
  scheduledAt     DateTime?       // Jadwal kunjungan atau survei, jika ada
  description     String?         // Keterangan tambahan dari customer (deskripsi masalah atau kebutuhan)
  escrowAmount    Float           // Nominal dana ditahan dalam escrow
  negotiationNote String?         // Catatan penawaran/negosiasi (jika konsultatif)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  /// Relasi ke data pembayaran
  payment         Payment?
  /// Riwayat chat yang terkait dengan order ini
  chatMessages    ChatMessage[]
  /// Review yang diberikan customer atas order ini
  review          Review?
  /// Data dispute jika terjadi sengketa pada order ini
  dispute         Dispute?
}

/// Model Payment untuk proses pembayaran dan escrow
model Payment {
  id              Int         @id @default(autoincrement())
  orderId         Int         @unique
  order           Order       @relation(fields: [orderId], references: [id])
  amount          Float       // Nominal pembayaran
  status          String      // Contoh: "PENDING", "COMPLETED", "FAILED"
  transactionId   String?     // ID transaksi dari gateway (opsional)
  createdAt       DateTime    @default(now())
}

/// Model Chat untuk komunikasi antara customer dan provider per order atau konsultasi
model ChatMessage {
  id              Int         @id @default(autoincrement())
  orderId         Int
  order           Order       @relation(fields: [orderId], references: [id])
  senderId        Int
  sender          User        @relation("SentMessages", fields: [senderId], references: [id])
  content         String      // Isi pesan
  createdAt       DateTime    @default(now())
}

/// Model Review untuk ulasan dan rating yang diberikan customer setelah order selesai
model Review {
  id              Int               @id @default(autoincrement())
  orderId         Int               @unique
  order           Order             @relation(fields: [orderId], references: [id])
  customerId      Int
  customer        User              @relation("CustomerReviews", fields: [customerId], references: [id])
  providerId      Int
  providerProfile ProviderProfile   @relation(fields: [providerId], references: [id])
  rating          Int             // Nilai rating misalnya dari 1 sampai 5
  comment         String?         // Komentar ulasan
  createdAt       DateTime        @default(now())
}

/// Model AuditLog untuk pencatatan aktivitas penting (digunakan oleh admin)
model AuditLog {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  action          String      // Deskripsi aksi, misalnya: "LOGIN", "CREATE_ORDER", "UPDATE_SERVICE", dll.
  details         String?     // Rincian tambahan (misal payload atau perubahan yang terjadi, bisa format JSON)
  createdAt       DateTime    @default(now())
}

/// Model Notification untuk mengirimkan pesan pemberitahuan ke user
model Notification {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  message         String      // Isi pesan notifikasi
  type            String      // Tipe notifikasi, misalnya: "ORDER_STATUS", "NEW_MESSAGE", dll.
  read            Boolean     @default(false)
  createdAt       DateTime    @default(now())
}

/// Model Dispute untuk menangani sengketa order jika terjadi masalah
model Dispute {
  id              Int         @id @default(autoincrement())
  orderId         Int         @unique
  order           Order       @relation(fields: [orderId], references: [id])
  customerId      Int
  customer        User        @relation(fields: [customerId], references: [id])
  providerId      Int
  providerProfile ProviderProfile @relation(fields: [providerId], references: [id])
  description     String      // Deskripsi sengketa dari customer
  status          String      // Contoh: "OPEN", "RESOLVED", "REJECTED"
  resolutionNote  String?     // Catatan resolusi atau tindakan admin
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

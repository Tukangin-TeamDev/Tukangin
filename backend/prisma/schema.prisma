```prisma
// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "./src/schema.ts"
}

// Role-based access
enum Role {
  ADMIN
  PROVIDER
  CUSTOMER
}

// Status of an order
enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  IN_PROGRESS
  COMPLETED
  DISPUTED
  CANCELED
}

// Mode of service
enum ServiceMode {
  FIXED
  CONSULT
}

// Payment status as enum for consistency
enum PaymentStatus {
  INITIATED
  COMPLETED
  FAILED
}

// KYC verification status for providers
enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                          Int       @id @default(autoincrement())
  email                       String    @unique
  passwordHash                String
  googleId                    String?   @unique
  emailVerified               Boolean   @default(false)
  emailVerificationToken      String?   @unique
  emailVerificationExpiry     DateTime?
  forgotPasswordToken         String?   @unique
  forgotPasswordTokenExpiry   DateTime?
  failedLoginAttempts         Int       @default(0)
  lockoutUntil                DateTime?
  twoFactorEnabled            Boolean   @default(false)
  twoFactorSecret             String?
  name                        String
  role                        Role      @default(CUSTOMER)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  providerProfile             Provider? @relation(fields: [providerProfileId], references: [id])
  providerProfileId           Int?
  customerOrders              Order[]   @relation("CustomerOrders")
  providerOrders              Order[]   @relation("ProviderOrders")
  reviewsWritten              Review[]  @relation("AuthorReviews")
  reviewsReceived             Review[]  @relation("TargetReviews")
  notifications               Notification[]
  auditLogs                   AuditLog[]
}

model Provider {
  id                   Int                 @id @default(autoincrement())
  user                 User                @relation(fields: [userId], references: [id])
  userId               Int                 @unique
  bio                  String?
  kycDocumentUrl       String?             // e.g. upload URL
  kycStatus            VerificationStatus  @default(PENDING)
  services             Service[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Service {
  id           Int         @id @default(autoincrement())
  provider     Provider    @relation(fields: [providerId], references: [id])
  providerId   Int
  title        String
  description  String
  mode         ServiceMode
  price        Float?      // required if mode = FIXED
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orders       OrderItem[]
}

model Order {
  id            Int          @id @default(autoincrement())
  customer      User         @relation("CustomerOrders", fields: [customerId], references: [id])
  customerId    Int
  provider      User         @relation("ProviderOrders", fields: [providerId], references: [id])
  providerId    Int
  status        OrderStatus  @default(PENDING)
  mode          ServiceMode
  totalAmount   Float
  scheduledAt   DateTime?
  idempotencyKey String?     @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  items         OrderItem[]
  offers        Offer[]      // consultative offers
  payments      Payment[]
  chats         ChatMessage[]
  dispute       Dispute?
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  quantity    Int      @default(1)
  unitPrice   Float
}

model Offer {
  id            Int       @id @default(autoincrement())
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       Int       @unique
  description   String
  proposedPrice Float
  estimatedTime Int       // in minutes
  location      String
  approved      Boolean   @default(false)
  approvedAt    DateTime?
  createdAt     DateTime  @default(now())
}

model Payment {
  id            Int            @id @default(autoincrement())
  order         Order          @relation(fields: [orderId], references: [id])
  orderId       Int
  method        String         // gateway name
  amount        Float
  status        PaymentStatus  @default(INITIATED)
  escrowRelease Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ChatMessage {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  sender      User      @relation(fields: [senderId], references: [id])
  senderId    Int
  content     String
  createdAt   DateTime  @default(now())
}

model Notification {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Review {
  id          Int       @id @default(autoincrement())
  author      User      @relation("AuthorReviews", fields: [authorId], references: [id])
  authorId    Int
  target      User      @relation("TargetReviews", fields: [targetId], references: [id])
  targetId    Int
  rating      Int       // 1-5 scale
  comment     String?
  createdAt   DateTime  @default(now())
}

model Dispute {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int       @unique
  reason      String
  status      String    // OPEN, RESOLVED, REJECTED
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  action      String    // e.g., USER_UPDATE, ORDER_CREATE
  resource    String    // e.g., User, Order
  resourceId  Int
  detail      Json?
  createdAt   DateTime  @default(now())
}
```

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - dasar untuk semua jenis pengguna
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String?   // Boleh null untuk OAuth
  phoneNumber       String    @unique
  isActive          Boolean   @default(true)
  role              Role
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Auth fields
  twoFactorEnabled  Boolean   @default(false)
  emailVerified     Boolean   @default(false)
  verificationToken String?
  verifiedAt        DateTime?
  // OAuth fields
  provider          Provider  @default(EMAIL)
  providerAccountId String?
  // Reset password
  resetToken        String?
  resetTokenExpiry  DateTime?

  // One-to-one relationships
  customer     Customer?
  provider     Provider?
  admin        Admin?

  // Other relationships
  notifications Notification[]
  devices       Device[]
  otpCodes      OtpCode[]
}

// Login Provider Types
enum Provider {
  EMAIL
  GOOGLE
  FACEBOOK
}

// Roles yang tersedia
enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

// OTP Code model untuk 2FA
model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  type      String   // "VERIFY_EMAIL", "2FA", "PASSWORD_RESET"
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

// Customer profile
model Customer {
  id            String   @id @default(uuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName      String
  address       String?
  avatarUrl     String?
  loyaltyPoints Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Customer relationships
  bookings      Booking[]
  reviews       Review[]
  disputes      Dispute[]
}

// Provider (Teknisi/Tukang) profile
model Provider {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName        String
  businessName    String?
  address         String?
  avatarUrl       String?
  bio             String?
  isVerified      Boolean  @default(false)
  walletBalance   Float    @default(0)
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  isAvailable     Boolean  @default(true)
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Provider relationships
  services        Service[]
  bookings        Booking[]
  reviews         Review[]
  documents       Document[]
  withdrawals     Withdrawal[]
}

// Admin profile
model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  role      String   @default("SUPPORT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Service yang disediakan Provider
model Service {
  id          String   @id @default(uuid())
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  description String
  price       Float
  unit        String   // e.g., "per hour", "per visit"
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    BookingService[]
}

// Kategori Service
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageUrl    String?
  parentId    String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Category relationships
  subCategories Category[] @relation("SubCategories")
  services      Service[]
}

// Booking model
model Booking {
  id            String         @id @default(uuid())
  customerId    String
  customer      Customer       @relation(fields: [customerId], references: [id])
  providerId    String
  provider      Provider       @relation(fields: [providerId], references: [id])
  status        BookingStatus  @default(PENDING)
  totalAmount   Float
  address       String
  latitude      Float
  longitude     Float
  notes         String?
  scheduledAt   DateTime?
  completedAt   DateTime?
  bookingNumber String         @unique
  estimatedArrival DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Booking relationships
  services      BookingService[]
  payments      Payment[]
  reviews       Review[]
  disputes      Dispute[]
  chatMessages  ChatMessage[]
  statusUpdates StatusUpdate[]
  invoices      Invoice[]
  requotes      Requote[]
}

// BookingService model untuk relasi many-to-many antara Booking dan Service
model BookingService {
  id        String   @id @default(uuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  price     Float    // Harga saat booking
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Status Booking
enum BookingStatus {
  PENDING
  ACCEPTED
  EN_ROUTE
  ON_SITE
  IN_PROGRESS
  REQUOTE
  COMPLETED
  CANCELLED
  DISPUTED
}

// Payment model
model Payment {
  id            String        @id @default(uuid())
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id])
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  platformFee   Float         @default(0)
  escrowNumber  String?
  escrowDate    DateTime?
  releaseDate   DateTime?
  paymentProofUrl String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Payment relationships
  invoices      Invoice[]
  transactions  Transaction[]
}

// Status Payment
enum PaymentStatus {
  PENDING
  ESCROW
  COMPLETED
  REFUNDED
  FAILED
}

// Model untuk Invoice
model Invoice {
  id          String   @id @default(uuid())
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  paymentId   String
  payment     Payment  @relation(fields: [paymentId], references: [id])
  invoiceNumber String  @unique
  totalAmount Float
  tax         Float    @default(0)
  discount    Float    @default(0)
  issuedAt    DateTime @default(now())
  dueAt       DateTime
  status      String   @default("UNPAID")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Review model
model Review {
  id          String   @id @default(uuid())
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id])
  rating      Int
  comment     String?
  response    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Dispute model
model Dispute {
  id          String       @id @default(uuid())
  bookingId   String
  booking     Booking      @relation(fields: [bookingId], references: [id])
  customerId  String
  customer    Customer     @relation(fields: [customerId], references: [id])
  reason      String
  description String
  status      DisputeStatus @default(OPEN)
  resolution  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Status Dispute
enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  REJECTED
}

// Document model untuk Provider
model Document {
  id          String   @id @default(uuid())
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  type        String   // e.g., "KTP", "CERTIFICATE"
  fileUrl     String
  status      String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Withdrawal model untuk Provider
model Withdrawal {
  id          String   @id @default(uuid())
  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id])
  amount      Float
  status      String   @default("PENDING") // "PENDING", "PROCESSED", "REJECTED"
  bankAccount String
  bankName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Notification model
model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        String
  isRead      Boolean  @default(false)
  metadata    Json?    // Additional data for deeplink/action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Chat Message model
model ChatMessage {
  id          String   @id @default(uuid())
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  senderId    String
  message     String
  attachmentUrl String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

// Status Update model
model StatusUpdate {
  id          String   @id @default(uuid())
  bookingId   String
  booking     Booking  @relation(fields: [bookingId], references: [id])
  status      String
  notes       String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
}

// Device model
model Device {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceToken  String   @unique
  deviceType   String   // "IOS", "ANDROID", "WEB"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Promo model
model Promo {
  id              String    @id @default(uuid())
  code            String    @unique
  discount        Float
  discountType    String    // "PERCENTAGE", "FIXED"
  maxDiscount     Float?
  minOrderAmount  Float?
  validUntil      DateTime
  isActive        Boolean   @default(true)
  usageLimit      Int?
  usageCount      Int       @default(0)
  categoryId      String?
  providerId      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Audit Log model
model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  entity      String
  entityId    String?
  oldData     Json?
  newData     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

// Transaction model
model Transaction {
  id             String   @id @default(uuid())
  paymentId      String
  payment        Payment  @relation(fields: [paymentId], references: [id])
  userId         String
  amount         Float
  transactionType String  // "ESCROW_IN", "ESCROW_OUT", "WITHDRAWAL", "REFUND"
  status         String   // "PENDING", "SUCCESS", "FAILED"
  description    String
  reference      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Wallet model
model Wallet {
  id          String   @id @default(uuid())
  userId      String   @unique
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Requote model
model Requote {
  id          String        @id @default(uuid())
  bookingId   String
  booking     Booking       @relation(fields: [bookingId], references: [id])
  amount      Float
  reason      String
  description String
  status      RequoteStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Status Requote
enum RequoteStatus {
  PENDING
  ACCEPTED
  REJECTED
} 
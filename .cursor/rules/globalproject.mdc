---
description: 
globs: 
alwaysApply: true
---

# Aturan Proyek Monorepo (Next.js + Express.js)

Dokumen ini menjabarkan **aturan dan panduan** untuk AI Code Composer agar menghasilkan kode secara konsisten dan lengkap dalam bentuk *monorepo*. Monorepo adalah satu repositori tunggal yang memuat kode untuk banyak proyek, sehingga memudahkan manajemen dependensi, workflow yang seragam, dan kolaborasi ([Creating a mono repo combining Tailwind, Next.js, | by Aezazali | Medium](https://medium.com/@aezazali.pro/creating-a-mono-repo-combining-tailwind-next-js-8f090f4f8968#:~:text=Understanding%20Monorepos)). Dalam konteks ini, monorepo akan berisi dua aplikasi utama: frontend (Next.js + Tailwind CSS + TypeScript) dan backend (Express.js + TypeScript).

## 1. Spesifikasi Teknologi  
- **Frontend**: Aplikasi Next.js menggunakan TypeScript. Next.js mendukung TypeScript secara *built-in*, sehingga cukup ubah ekstensi file menjadi `.ts/.tsx` dan jalankan `next dev` untuk menginisialisasi TypeScript otomatis (Next.js akan membuat `tsconfig.json` dan memasang dependensi TS yang diperlukan) ([Configuration: TypeScript | Next.js](https://nextjs.org/docs/pages/api-reference/config/typescript#:~:text=Next.js%20comes%20with%20built,app)).  
- **Styling**: Gunakan **Tailwind CSS** untuk styling frontend. Sesuai dokumentasi Tailwind, masukkan direktif `@tailwind base; @tailwind components; @tailwind utilities;` di file CSS global (misalnya `styles/globals.css`) agar Tailwind aktif ([Install Tailwind CSS with Next.js - Tailwind CSS](https://v2.tailwindcss.com/docs/guides/nextjs#:~:text=Open%20the%20,replacing%20the%20original%20file%20contents)). Konfigurasikan juga `tailwind.config.js` dan `postcss.config.js` di folder frontend.  
- **Backend**: Aplikasi Express.js menggunakan TypeScript. Strukturkan backend dengan folder `src/` berisi kode TS, dan buat `tsconfig.json` untuk target Node. Pasang `express` sebagai dependency, serta `typescript`, `ts-node-dev` (atau `nodemon`) dan `@types/*` sebagai devDependencies. Gunakan `import express from 'express'` dengan `esModuleInterop: true` agar modul ES berjalan lancar di Node.

## 2. Struktur Monorepo  
- Buat struktur direktori monorepo yang jelas, misalnya:  
  - `/frontend` – proyek Next.js.  
  - `/backend` – proyek Express.js.  
  - (Opsional) folder `/shared` atau `/packages` untuk kode bersama.  
- Di root, buat `package.json` yang berisi pengaturan *workspace* (misalnya Yarn Workspaces). Tambahkan array `"workspaces": ["frontend", "backend"]` agar paket frontend dan backend dikenali sebagai workspace ([Workspaces | Yarn](https://yarnpkg.com/features/workspaces#:~:text=How%20are%20workspaces%20declared%3F)). Pastikan `package.json` root juga berisi `"private": true`.  
- Sertakan file konfigurasi global di root, seperti `.gitignore` (mengecualikan `node_modules`, `dist`, dan file environment), `.prettierrc`/`.eslintrc` jika perlu, serta `README.md` dengan instruksi umum. Root juga dapat berisi `tsconfig.base.json` untuk konfigurasi TypeScript yang dibagi (jika diperlukan).  

## 3. Konfigurasi Frontend (Next.js + Tailwind + TypeScript)  
- Inisialisasi Next.js di folder `/frontend`. Misalnya, jalankan `npx create-next-app@latest --ts` untuk membuat proyek Next.js dengan TypeScript. Atau buat `package.json`, install `next`, `react`, `react-dom`, lalu siapkan `tsconfig.json`.  
- Setelah setup awal, install Tailwind: `npm install -D tailwindcss autoprefixer postcss`. Jalankan `npx tailwindcss init -p` untuk membuat `tailwind.config.js` dan `postcss.config.js`. Tambahkan direktif `@tailwind base; @tailwind components; @tailwind utilities;` ke `./styles/globals.css` agar Tailwind dapat digunakan ([Install Tailwind CSS with Next.js - Tailwind CSS](https://v2.tailwindcss.com/docs/guides/nextjs#:~:text=Open%20the%20,replacing%20the%20original%20file%20contents)).  
- Pastikan ekstensi file untuk komponen dan halaman adalah `.tsx`. Sertakan definisi tipe yang diperlukan, misalnya `@types/node`, `@types/react`, `@types/react-dom` sebagai devDependencies.  
- Buat komponen dasar Next.js (misalnya halaman di `pages/index.tsx` dan `_app.tsx`) untuk memeriksa bahwa build berjalan. Pastikan konfigurasi `next.config.js` (jika ada) menggunakan sintaks yang sesuai (ESM atau CommonJS konsisten).  

## 4. Konfigurasi Backend (Express.js + TypeScript)  
- Inisialisasi proyek Node di folder `/backend`. Jalankan `npm init -y`, lalu install `express` sebagai dependency utama. Tambahkan juga `dotenv` untuk membaca variabel lingkungan. Sebagai devDependencies, pasang `typescript`, `ts-node-dev` (atau `nodemon`), dan tipe-tipe pendukung seperti `@types/express`, `@types/node`, `@types/dotenv`.  
- Buat struktur folder `src/` di backend. Di dalamnya, buat file entry point seperti `index.ts` atau `app.ts` yang mengimpor `express`. Contoh sederhana:  
  ```ts
  import express from 'express';
  import dotenv from 'dotenv';
  dotenv.config();
  const app = express();
  const port = process.env.PORT || 3000;
  app.get('/', (req, res) => res.send('Hello World'));
  app.listen(port, () => console.log(`Server berjalan di port ${port}`));
  ```  
- Konfigurasikan `tsconfig.json` backend untuk menargetkan Node. Sebaiknya tambahkan `rootDir: "src"` dan `outDir: "dist"`, serta `esModuleInterop: true` agar `import express` berfungsi baik ([What are the PowerShell equivalents of Bash's && and || operators? - Stack Overflow](https://stackoverflow.com/questions/2416662/what-are-the-powershell-equivalents-of-bashs-and-operators#:~:text=%28As%20of%20PSv5,statement%20separator%20in%20this%20version)). Pada tipe modul, gunakan `"module": "CommonJS"` (atau `"ESNext"` jika Node versi terbaru) sesuai kebutuhan.  
- Setelah penulisan kode, jalankan kompilasi TypeScript: `tsc`. File hasil kompilasi akan ada di `dist/`.  

## 5. Variabel Lingkungan (`.env`)  
- Jangan mengubah file `.env` yang sudah ada. File ini diasumsikan sudah berisi nilai-nilai rahasia atau pengaturan kritis. Alih-alih mengubah `.env`, buat file template `.env.example` di root (atau di masing-masing folder jika perlu) berisi daftar variabel dengan contoh placeholder. Misalnya:  
  ```
  PORT=3000
  DATABASE_URL=<your-database-url>
  ```  
- Pastikan `.env` dicantumkan di `.gitignore` agar tidak ter-commit. Hanya `*.example` dan file konfigurasi lain yang boleh dimasukkan ke repository.  
- Di kode backend, gunakan `dotenv.config()` untuk memuat variabel. Pastikan variabel seperti `PORT`, `DB_*`, dll, digunakan sesuai yang tertera di `.env.example`.

## 6. Instruksi Instalasi dan Build  
- Berikan instruksi instalasi yang jelas, menggunakan satu baris per perintah agar kompatibel dengan PowerShell. **Hindari penggunaan `&&`** untuk menggabungkan perintah karena PowerShell tidak mendukungnya ([break with ||, && in Powershell - Super User](https://superuser.com/questions/1769863/break-with-in-powershell#:~:text=,break)). Sebagai gantinya, tulis setiap perintah secara terpisah. Contoh:  
  1. Pergi ke direktori frontend: `cd frontend`  
  2. Install dependensi: `npm install`  
  3. Kembali ke root (`cd ..`), lalu ke backend: `cd backend`  
  4. Install dependensi backend: `npm install`  
- Demikian juga untuk perintah build dan start di production, berikan masing-masing perintah pada baris baru. Misalnya `npm run build` di dalam folder frontend dan backend secara terpisah, lalu `npm run start` setelah build selesai.  
- Dokumentasikan urutan perintah ini di `README.md` atau bagian instruksi. Tujuannya agar pengguna (atau AI) tahu langkah setup proyek secara urut.

## 7. Skrip NPM (Development & Production)  
- **Frontend (Next.js)**: Di `package.json` frontend, sertakan skrip utama seperti:  
  - `"dev": "next dev"` untuk pengembangan (hot-reload).  
  - `"build": "next build"` untuk membangun aplikasi production.  
  - `"start": "next start"` untuk menjalankan server Next.js yang sudah dibuild.  
  - Opsional: `"lint": "next lint"` jika menggunakan ESLint.  
- **Backend (Express.js)**: Di `package.json` backend, tambahkan skrip:  
  - `"dev": "ts-node-dev --respawn src/index.ts"` (atau `nodemon --watch src -x ts-node src/index.ts`) untuk menjalankan server dalam mode pengembangan dengan live-reload.  
  - `"build": "tsc"` untuk mengkompilasi TypeScript ke JavaScript di folder `dist`.  
  - `"start": "node dist/index.js"` untuk menjalankan server Express hasil build.  
  - Opsional: `"lint": "eslint ."` jika mengaktifkan linting.  
- Pastikan semua nama skrip konsisten dan jelas. Skrip-skrip ini memudahkan perintah sederhana seperti `npm run dev` di masing-masing folder.

## 8. Konsistensi dan Kualitas Kode  
- **Konsistensi Sintaks**: Gunakan modul dan sintaks yang konsisten. Misalnya, jika menggunakan `import ... from ...`, patuhi ES Modules di seluruh kode (Next.js mendukung ESM). Hindari mencampur `module.exports` dan `export`/`import`.  
- **Pemeriksaan Kesalahan**: Pastikan tidak ada konflik import/export (seperti dua eksport default di satu file) atau kesalahan penamaan variabel yang bisa menyebabkan error saat build. Aktifkan pemeriksaan tipe ketat di TypeScript (`"strict": true` di `tsconfig.json`) agar error ditangkap saat kompilasi.  
- **Linting/Formatting**: Sebaiknya tambahkan konfigurasi ESLint/Prettier untuk menjaga gaya kode seragam (misalnya di root `.eslintrc` dan `.prettierrc`). Meskipun tidak diwajibkan, ini membantu mencegah typo dan memastikan kualitas kode.  
- **Pengujian Build**: Setelah AI menghasilkan kode, pastikan build di kedua sisi (Next.js dan Express) berhasil tanpa error. Semua impor modul harus valid, dan jalankan `npm run build` di frontend serta backend untuk verifikasi akhir.

Dengan mengikuti aturan ini secara menyeluruh, AI Code Composer akan menghasilkan proyek monorepo yang lengkap dan bebas error. Setiap bagian – mulai dari struktur direktori, dependensi, konfigurasi hingga skrip npm – ditata dan dijelaskan dengan jelas, sehingga memudahkan pengembangan lebih lanjut. Sumber referensi dan praktik terbaik dari dokumentasi resmi Next.js, Tailwind, dan Node.js telah dijadikan panduan dalam aturan ini ([Configuration: TypeScript | Next.js](https://nextjs.org/docs/pages/api-reference/config/typescript#:~:text=Next.js%20comes%20with%20built,app)) ([Install Tailwind CSS with Next.js - Tailwind CSS](https://v2.tailwindcss.com/docs/guides/nextjs#:~:text=Open%20the%20,replacing%20the%20original%20file%20contents)) ([Workspaces | Yarn](https://yarnpkg.com/features/workspaces#:~:text=How%20are%20workspaces%20declared%3F)) ([break with ||, && in Powershell - Super User](https://superuser.com/questions/1769863/break-with-in-powershell#:~:text=,break)).  


